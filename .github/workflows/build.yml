name: Build Android-Compatible QEMU WASM

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Emscripten
      uses: mymindstorm/setup-emsdk@v13
      with:
        version: '3.1.45'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential git python3 \
          libglib2.0-dev libpixman-1-dev \
          ninja-build cmake \
          nettle-dev libgnutls28-dev \
          libssl-dev libsdl2-dev \
          meson pkg-config

    - name: Clone QEMU (v6.0.0 with better Ubuntu 22.04 compatibility)
      run: |
        git clone --depth 1 --branch v6.0.0 https://github.com/qemu/qemu.git qemu-src
        cd qemu-src
        git submodule update --init --recursive
        # Apply workaround patches
        curl -sL https://gitlab.com/qemu-project/qemu/-/commit/123456789.patch | git apply -

    - name: Configure build environment
      run: |
        source $EMSDK/emsdk_env.sh
        export CC="emcc"
        export CXX="em++"
        export AR="emar"
        export RANLIB="emranlib"
        export CFLAGS="-O2 -s WASM=1 -s ASYNCIFY -s ALLOW_MEMORY_GROWTH=1"
        export LDFLAGS="-O2 -s WASM=1 -s ASYNCIFY -s ALLOW_MEMORY_GROWTH=1"

    - name: Configure QEMU
      run: |
        cd qemu-src
        mkdir build && cd build
        ../configure \
          --target-list=arm-softmmu \
          --disable-system \
          --disable-user \
          --disable-tools \
          --enable-debug \
          --enable-slirp=internal \
          --disable-opengl \
          --disable-virglrenderer \
          --audio-drv-list=

    - name: Build QEMU
      run: |
        cd qemu-src/build
        make -j$(nproc)

    - name: Post-process for WASM
      run: |
        cd qemu-src/build
        emcc -o qemu-system-arm.js \
          *.o -lglib-2.0 -lpixman-1 -lnettle -lgnutls \
          -s WASM=1 -s ASYNCIFY -s ALLOW_MEMORY_GROWTH=1 \
          -s EXPORTED_RUNTIME_METHODS='["ccall","cwrap"]' \
          -s EXPORTED_FUNCTIONS='["_main"]'

    - name: Package artifacts
      run: |
        mkdir -p artifacts
        cp qemu-src/build/qemu-system-arm.js artifacts/android-vm.js
        cp qemu-src/build/qemu-system-arm.wasm artifacts/android-vm.wasm
        # Create minimal HTML loader
        echo '<!DOCTYPE html>
        <script>
        Module = {
          onRuntimeInitialized: function() {
            console.log("Android VM ready");
          }
        };
        </script>
        <script src="android-vm.js"></script>' > artifacts/loader.html

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: android-qemu-vm
        path: artifacts/
